{"version":3,"sources":["INR.js","USD.js","Rate.js","App.js","serviceWorker.js","index.js"],"names":["INR","_ref","inr","handleINR","react_default","a","createElement","className","type","value","onChange","placeholder","USD","usd","handleUSD","Rate","rate","handleRate","App","state","_this","bind","Object","assertThisInitialized","this","setState","event","_this2","target","src_Rate","src_INR","src_USD","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1791d72a.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction INR({ inr, handleINR }) {\n  return (\n    <div className=\"inr row\">\n      <div className=\"label\">INR</div>\n      <input\n        type=\"number\"\n        className=\"custom-input\"\n        value={inr}\n        onChange={handleINR}\n        placeholder=\"Enter INR value here\"\n      />\n    </div>\n  );\n}\n\nexport default INR;\n","import React from \"react\";\n\nfunction USD({ usd, handleUSD }) {\n  return (\n    <div className=\"usd row\">\n      <div className=\"label\">USD</div>\n      <input\n        type=\"number\"\n        className=\"custom-input\"\n        value={usd}\n        onChange={handleUSD}\n        placeholder=\"Enter USD value here\"\n      />\n    </div>\n  );\n}\n\nexport default USD;\n","import React from \"react\";\n\nfunction Rate({ rate, handleRate }) {\n  return (\n    <div className=\"rate row\">\n      <div className=\"label\">\n        Rate <i>(1 USD = {rate} INR)</i>\n      </div>\n      <input\n        type=\"number\"\n        className=\"custom-input\"\n        value={rate}\n        onChange={handleRate}\n        placeholder=\"1 USD = ? INR\"\n      />\n    </div>\n  );\n}\n\nexport default Rate;\n","import React from \"react\";\n\nimport \"./app.scss\";\n\nimport INR from \"./INR\";\nimport USD from \"./USD\";\nimport Rate from \"./Rate\";\n\nclass App extends React.Component {\n  state = {\n    rate: 70,\n    inr: \"\",\n    usd: 1\n  };\n\n  handleRate = this.handleRate.bind(this);\n  handleINR = this.handleINR.bind(this);\n  handleUSD = this.handleUSD.bind(this);\n\n  componentDidMount() {\n    this.setState({ inr: this.state.usd * this.state.rate });\n  }\n\n  handleRate(event) {\n    this.setState(\n      {\n        rate: event.target.value\n      },\n      () =>\n        this.setState({\n          inr: this.state.usd * this.state.rate\n        })\n    );\n  }\n\n  handleINR(event) {\n    this.setState({\n      inr: event.target.value,\n      usd: event.target.value / this.state.rate\n    });\n  }\n\n  handleUSD(event) {\n    this.setState({\n      usd: event.target.value,\n      inr: event.target.value * this.state.rate\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Rate rate={this.state.rate} handleRate={this.handleRate} />\n        <INR inr={this.state.inr} handleINR={this.handleINR} />\n        <USD usd={this.state.usd} handleUSD={this.handleUSD} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}